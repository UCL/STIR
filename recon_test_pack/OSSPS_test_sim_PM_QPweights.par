OSSPSParameters :=
; test file for OSSPS with a quadratic prior (and ray tracing projection matrix)
objective function type:= PoissonLogLikelihoodWithLinearModelForMeanAndProjData
PoissonLogLikelihoodWithLinearModelForMeanAndProjData Parameters:=

input file := my_prompts${suffix}.hs
zero end planes of segment 0:= 1
; if disabled, defaults to maximum segment number in the file
;maximum absolute segment number to process := 3

projector pair type := Matrix
  Projector Pair Using Matrix Parameters :=
  Matrix type := Ray Tracing
  Ray tracing matrix parameters :=
   number of rays in tangential direction to trace for each bin := 2
   do symmetry 90degrees min phi := 0
  End Ray tracing matrix parameters :=
  End Projector Pair Using Matrix Parameters :=

  Bin Normalisation type := from projdata
    Bin Normalisation From ProjData :=
    normalisation projdata filename:= my_acfs${suffix}.hs
    End Bin Normalisation From ProjData:=

additive sinogram := my_additive_sinogram${suffix}.hs

use subset sensitivities:=1
subset sensitivity filenames:= my_test_sim${suffix}_sens_PM_s${num_subsets}_%d.hv
recompute_sensitivity:=1

prior type := quadratic
  Quadratic Prior Parameters:=
  penalisation factor := 1
  weights:={{{0,1,0},{1,0,1},{0,1,0}}}
  END Quadratic Prior Parameters:=


end PoissonLogLikelihoodWithLinearModelForMeanAndProjData Parameters:=

output filename prefix := my_test_sim${suffix}_image_OSSPS_PM_QPweights

number of subsets:= ${num_subsets}
start at subset:= 0
number of subiterations:= 56
save estimates at subiteration intervals:= 56

;report objective function values interval := 1
; if next is disabled, defaults to image full of 1s (but that's not good for OSSPS)
; in particular, make sure it has the correct scale
initial estimate:= my_test_sim${suffix}_image_OSMAPOSL_PM_14.hv
;enforce initial positivity condition := 1

; here start OSSPS specific values

; values to use for the 'precomputed denominator'
; specify either procomputed denomiator or normalisation type
  ; use the following if you have it already (e.g. from previous run)
  ; precomputed denominator := my_precomputed_denominator.hv

; specify relaxation scheme
; lambda = relaxation_parameter/ (1+relaxation_gamma*(subiteration_num/num_subsets)
relaxation parameter := 2
relaxation gamma:=.1


END :=
