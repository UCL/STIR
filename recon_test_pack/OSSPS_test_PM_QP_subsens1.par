OSSPSParameters :=
; sample file for OSSPS
; parameters used here are for illustrative purposes only
; i.e. they are not recommended values

objective function type:= PoissonLogLikelihoodWithLinearModelForMeanAndProjData
PoissonLogLikelihoodWithLinearModelForMeanAndProjData Parameters:=

input file := Utahscat600k_ca_seg4.hs
zero end planes of segment 0:= 1
; if disabled, defaults to maximum segment number in the file
maximum absolute segment number to process := 3

; change to STIR 2.x default for compatibility 
use subset sensitivities:=1
sensitivity filename:= RPTsens_seg3_PM.hv

projector pair type := Matrix
  Projector Pair Using Matrix Parameters :=
  Matrix type := Ray Tracing
  Ray tracing matrix parameters :=
   number of rays in tangential direction to trace for each bin := 2
;   restrict to cylindrical fov := 0
  End Ray tracing matrix parameters :=
  End Projector Pair Using Matrix Parameters :=

; additive sinogram:=my_fake_randoms.hs
prior type := quadratic
  Quadratic Prior Parameters:=
  penalisation factor := 0.5
  ; next defaults to 0, set to 1 for 2D inverse Euclidean weights, 0 for 3D 
  only 2D:= 0
  END Quadratic Prior Parameters:=

End PoissonLogLikelihoodWithLinearModelForMeanAndProjData Parameters:=

output filename prefix := my_test_image_OSSPS_PM_QP_subsens
; iteration scheme

number of subsets:= 4
;start at subset:= 0
;start at subiteration number := 1
number of subiterations:= 8
Save estimates at subiteration intervals:= 8
;write update image := 0
;report objective function values interval := 1

; if next is disabled, defaults to image full of 1s (but that's not good for OSSPS)
; in particular, make sure it has the correct scale
initial estimate:= test_image_PM_QP_6.hv
enforce initial positivity condition := 1

; here start OSSPS specific values

; values to use for the 'precomputed denominator'
; specify either procomputed denomiator or normalisation type
  ; use the following if you have it already (e.g. from previous run)
  ; note: setting the value to 1 will use an images full of ones.
  ; precomputed denominator := my_precomputed_denominator.hv

; specify relaxation scheme
; lambda = relaxation_parameter/ (1+relaxation_gamma*(subiteration_num/num_subsets)
relaxation parameter := 2
relaxation gamma:=.1


END :=






