<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
  <head>
    <title>Summary of changes in STIR release 3.1 (dated 31/12/2017)</title>
  </head>

  <body>
    <h1>Summary of changes in STIR release 3.1 (dated 31/12/2017)</h1>

<p>This version is 95% backwards compatible with STIR 3.0 for the user aside from minor changes 
when using Python/MATLAB and when changed image orientation when reading/writing images via ITK (see below).
Developers might need to make minor code changes as 
detailed below.
</p>
<h2>Overall summary</h2>
<p>This release considerably expands OpenMP support for multi-threaded 
   execution. Previously, only FBP2D was multi-threaded and it underperformed.
   Now, any reconstruction code using distributable_computation() (including
   OSMAPOSL and OSSPS) and the scatter estimation code is multi-threaded. See
  <ul>
  <li>Kris Thielemans, Vesna Cuplov, Benjamin A. Thomas, <br />
  <i><cite>Multi-threaded image reconstruction of 3D PET sinogram data with STIR,</cite></i> <br /> 
  proc. Fully 3D Conference, Newport, RI, USA, Jun 2015.</li>
  </ul>
</p>
<p>In addition, this version contains preliminary code for Maximum Likelihood estimation
  of normalisation factors and randoms for PET, written mostly by Kris Thielemans, 
  then at Hammersmith Imanet Ltd. This code is kindly contributed by GE Healthcare. See
  <ul>
   <li>Hogg, K. Thielemans, T. Spinks, N. Spyrou,  <br />
     <i><cite>Maximum-Likelihood Estimation of Normalisation Factors for PET, </cite></i> <br /> 
     proc. of IEEE Medical Imaging Conf. 2001, vol. 4 pp. 2065 - 2069.</li>
  <li>D. Hogg, K. Thielemans, S. Mustafovic and T.J. Spinks,  <br />
    <i><cite>A Study of Bias for various Iterative Reconstruction Methods in PET,</cite></i> <br /> 
    Proc. of IEEE Medical Imaging Conf. 2002, vol. 3, pp. 1519 - 1523.</li>
  </ul>

</p>

<p>Initial support for image-based PSF-modelling in PET.</p>
<p>There is also initial support for the 32-bit list mode file format
for Siemens scanners (warning: tested in Biograph mMR only at present).
</p>

<p>We now support additional list mode file formats (Siemens mMR, SAFIR and CERN ROOT files).
</p>

<p>The build system now only uses CMake. We recommend to use CMake version 3.1 or later 
on Linux/MacOSX and 3.10.2 or later on Windows, but we try to accomodate older versions of CMake.
</p>
    
<p>We now support the parsing of SIEMENS Interfile files natively.</p>
 
<p>Of course, there is also the usual code-cleanup and 
improvements to the documentation.
</p>

<p>This release contains mainly code written by Kris Thielemans and Nikos Efthimiou (UCL),
  but with contributions by Jannis Fischer (ETH Zurich) for SAFIR support,
  Elise Emond for IO fixes (UCL), Edoardo Pasca (STFC) for Siemens interfile support,
  Daniel Deida (Leeds) for the PLS prior, and some code clean-up by David Volgyes. Various bits
were tested by (in alphabetical order, all UCL except where indicated):
Ottavia Bertolli, Matthias Ehrhardt, Pawel Markiewicz, Richard Manber, Alaleh Rashidnasab,
Benjamin Thomas (CIRC ASTAR and UCL), Yu-jung Tsai, Vesna Cuplov).
</p>

<h2> Summary for end users (also to be read by developers)</h2>

<h3>Bbug fixes</h3>
<ul>
<li>bug fixed in writing of SPECT interfile headers: "direction of rotation" was set incorrect. This 
affected output of forward_project (and stir_math -s). Reconstruction was not affected though.
</li>
<li>fix conversion from raw GATE using
  <tt>conv_GATE_raw_ECAT_projdata_to_interfile</tt>(it was using the wrong segment-order and data-type).</li>
<li>the function value of the quadratic prior value was inconsistent with its gradient. It is now
divided by 2. This bug did not affect OSMAPOSL nor OSSPS, but did affect the value of the 
objective function being printed out. This bug would cause major problems if you developed your
  own reconstruction algorithms that used the objective function value. (bug found by Yu-Jung Tsai).</li>
<li>minor bug fix in FBP3DRP. The determination of the rmin/rmax of the missing data was incorrect for 
negative delta (the range was too narrow). In principle, this could
have caused problems, but only when a projector was used where the
segment symmetry is switched off.
</li>
<li>When using the <code>inNormalisationFromAttenuationImage</code>  constructor that takes
  an image, the code would rescale the image of the caller.<br />
This bug did not affect command line utilities, but did affected
python/matlab or use of the C++ library.
</li>
</ul>

<h3>New functionality</h3>
<ul>
  <li><tt>create_projdata_template</tt> now allows even span. In particular,
span 2 corresponds to how GE stores data. See the STIR glossary for more information.</li>
<li>As mentioned above, many operations are now multi-threaded when you built with OPENMP support.
By default, we use about 90% of your cores, but you can change that by setting the OMP_NUM_THREADS
environment variable before you start your STIR work (see the wiki).
Please note that you cannot enable both OPENMP and MPI.</li>
<li>Image-based PSF-modelling in PET can be achieved by using projectors
  that first smooth data image before forward projection or after back projection.
  However, this is currently somewhat difficult to set-up and has a too high performance impact.
  Note that the SPECT projector does allow sinogram-based PSF modelling.
  </li>
<li>Functions and executables for ML estimation of singles/randoms/normalisation factors.
These are only minimally documented at the present stage unfortunately.
</li>
<li>We now include a shell script for easier scatter estimation.</li>
<li><tt>list_lm_countrates</tt> is a new list mode utility to output total counts per specified time interval.</li>
<li>List-mode classes for Siemens ECAT8 (32-bit).</li>
<li>add Verbosity level (currently only to be set from interactive languages)</li
<li>Added the anatomical parallel level sets (PLS) prior. If an uniform anatomical image is provided it will work as a (smoothed) total variation (TV) prior </li>
<li>New input: GATE compatibility layer. ROOT files from cylindricalPET and ECAT simulated scanners can be imported as listmode files. Some simple options are provided, like exclude scattered or randoms. </li>
<li>New header file, with .hroot extension is provided for ROOT files </li>
<li><code>CListModeData</code> got a new function <code>get_total_number_of_events()</code>, BUT currently only <code>CListModeDataFromROOT</code> supports it. </li> 
<li>Sensitivity calculation parallelized using distributed worker mechanism.</li>
<li>Python (and MATLAB) interface
  <ul>
    <li>added GeneralisedPoissonNoiseGenerator</li>
  </ul>
</li>
<li>Projection- and normalisation-related classes have had changes to make them much safer to use in an interactive
  environment such as Python. The methods will now check if <code>set_up()</code> has been called
  and if the images/projection data have the same characteristics as those used when the object was set-up.
  (Actually, projection data can be &quote;smaller&quote;, e.g. less segments).
  </li>
</ul>


<h3>Changed functionality</h3>
<ul>
<li><tt>create_projdata_template</tt> 
    now returns an extra segment pair if the maximum ring difference does not coincide with a &quot;full&quot; segment.
    This change was to accomodate how GE uses even span.
</li>
<li>
  The <code>num_events_to_store</code> variable in <code>LmToProjData</code> has been upgraded to long int
  allow processing of more events in list mode files.
</li>
<li>
The orientation of images read/written via ITK has changed. It should now be correct if the patient
was in HFS position. This is currently not checked (and for many file formats, never can be checked).
</li>
<li><tt>calculate_attenuation_coefficients</tt> now defaults to using the ray-tracing matrix as
  projector. Results should be identical though. This means it will not automatically handle
  cases where there are less symmetries in the data, e.g. for scanners with odd number of
  views.<br />
  It has a new switch <tt>--NOPMRT</tt> which reverts to the previous behaviour (i.e. using
  the old ray tracer on-the-fly projector).
  </li>
</ul>
<h4>Python (and MATLAB) interface</h4>
<ul>
<li>
  renamed <code>get_scanner_ptr()</code> and <code>get_proj_data_info_ptr()</code> in the 
  <code>get_scanner()</code> and <code>get_proj_data_info()</code>
</li>
<li>expose <code>Bin</code> member functions as variables (or attributes).    
  As opposed to <code>bin.view_num()</code>, write <code>bin.view_num</code>. You can now also do
  <code>bin.view_num=1</code>.
</li>
</ul>


<h3>Build system</h3>
<ul>
<li>Also find the Python executable. This allows specifying your python version by
defining <code>PYTHON_EXECUTABLE</code> when running CMake.</li>
<li>added (advanced) options <code>STIR_USE_BOOST_SHARED_PTR</code> and <code>STIR_NO_UNIQUE_PTR</code>.
These default to <code>Off</code> unless Boost believes that your compiler does not have a working
<code>std::shared_ptr</code> or <code>std::unique_ptr</code> (and in particular
if you didn't enable C++11 or higher).
You should normally not have to change these options.</li>
<li>provide CMake option to disable ITK usage even if it's found. </li>
<li>fixes related to OpenMP</li>
<li>Changes to CMake build files, allowing others to import STIR via
  <code>find_package</code>. To allow this, CMake now creates a config.h file which sets
  preprocessor variables etc (as opposed to passing these on the compiler command line).
</li>
<li> added <code>BUILD_TESTING</code> and <code>BUILD_EXECUTABLES</code> options to reduce build time if you do not need those files</li>
<li>install include files</li> 
<li> CMake now has a flag to create the target "doc" for building the Doxygen documentation
  thanks to Jannis Fischer.
</li>
</ul>

<p><strong>WARNING</strong>: <code>fwdtest</code> and <code>bcktest</code> are now only installed when BUILD_TESTING is ON. Use <code>forward_project</code> and <code>backward_project</code> instead.</p>

<p>Using <a href="http://www.cmake.org">CMake</a> is the only option to build STIR (see the wiki).
</p>

<h3>Known problems</h3>
<ul>
<li>SPECT related
 <ul>
 <li> Do NOT use current PET projectors on SPECT Data. You will have to choose the "SPECT UB" projector 
    in all cases (see the sample .par files).</li>
 <li>The quantitative scale of reconstructed SPECT images is generally different than for PET reconstructions.
    It probably also behaves differently than the PET projectors when using different voxel sizes.</li>
 <li>Images are still written as PET Interfile (but this is ignored when reading).</li>
 <li>At present, the collimator model varies the width of the PSF linearly with distance. This was
   experimentally verified with some collimators (for normal distances to the collimator).
   However, we need to add the possibility to use different models.
  </li>
  <li><tt>list_projdata_info</tt> still reports SPECT data as if it's a PET scanner, but you can see
    all necessary geometric info from it anyway.</li>
  <li><tt>create_projdata_template</tt> only works for PET scanners. For SPECT, you could take the 
   sample Interfile header, modify it to your needs (and create an empty file for the binary data pointed to
   by the Interfile header).
  </li>
  </ul>
</li>
<li>Building with shared libraries is currently broken on many (all?) systems due to inter-dependencies between libraries.</li>
<li>This release is known to fail when both MPI and shared libraries are enabled. You will see linking errors in all non_MPI executables.</li>
<li>ECAT6 is no longer supported</li>
<li>The incremental interpolating back-projector still gives problems in the centre of the images
on some architectures/compiler/optimisation settings. We recommend to use the ray-tracing
matrix (with additional rays) instead.</li>
<li>When using <code>GRAPHICS=X</code> (i.e. on Unix/Linux/MacOSX) the window displaying
the bitmaps is sometimes empty. This might depend on your X server settings.
This affects <tt>manip_image</tt>, <tt>manip_projdata</tt> and <tt>display_projdata</tt>. 
We have currently no work-around (aside from using <code>GRAPHICS=PGM</code> or
<tt>stir_write_pgm</tt>).
</li>
</ul>

<h3>Minor bug fixes</h3>
<ul>
<li>fix HighResWallClockTimer on Linux and Win32 which caused reporting wrong timings in certain situations</li>
<li><code>LmToProjData</code> crashed when a template was used which was incompatible with the unlisting (e.g. a arc-corrected template for
most cylindrical scanners).
<li>listmode files could not be re-read when the end of the file was reached. This could have affected cases where the number of segments was limited and all events were read while unlisting the file. (e.g. in <code>lm_to_projdata</code>)</li>
</li>
</ul>

<h3>Documentation changes</h3>
<ul>
<li>Added documentation on new features</li> 
<li>The Wiki expands more and more, so use it in addition to the provided PDFs.
</li>
 </ul>

<h3>recon_test_pack changes</h3>
<ul>
<li>updated version number and added some clarification to the README.txt</li>
<li>Simple test script for GATE produced ROOT files has been added.</li>
 </ul>

<h3>Other changes to tests</h3>
<ul>
<li>added tests for the ITK IO routines</li>
</ul>

<H2>What's new for developers (aside from what should be obvious
from the above):</H2>

<h3>Major bugs fixed</h3>
<ul>
<li>see above</li>
</ul>

<h3>Backward incompatibities</h3>
<ul>
  <li>STIR now uses <code>std::unique_ptr</code> as opposed to <code>std::auto_ptr</code>, as recommended for C++-11 and 
    later (unless the CMake option <code>STIR_NO_UNIQUE_PTR</code> is set).
    This affects calls to
    <code>read_from_file</code> and <code>DataSymmetriesForBins::find_symmetry_operation_from_basic_bin</code> etc.
    You should normally just be able to do a simple find-and-replace.<br />
    Note that if <code>std::unique_ptr</code> is not defined for your compiler (and compilation flags), STIR
    will try to work-around this (see src/include/stir/unique_ptr.h). 
  </li>
<li>Make <code>stir::shared_ptr</code> to be <code>std::shared_ptr</code>
  (stick to <code>boost::shared_ptr</code> if the CMake option <code>STIR_USE_BOOST_SHARED_PTR</code>
  is set, i.e. normally when <code>BOOST_NO_CXX11_SMART_PTR</code>
  is defined). We now also import <code>dynamic_pointer_cast</code> and
  <code>static_pointer_cast</code> into the <code>stir</code> namespace
  such that you can write code that doesn't need to know which <code>shared_ptr</code>
  is used. Finally, use the preprocessor define <code>MAKE_SHARED</code> as opposed to
  <code>std::make_shared</code>.
</li>
<li>Projection- and BinNormalisation-related derived classes now have to call <code>set_up()</code> of their base
  class. Otherwise, you will get run-time errors saying that <code>set_up()</code> was not called.
  </li>
  <li><code>ProjDataInfo::ProjDataInfoCTI</code> (superseded by <code>ProjDataInfo::construct_proj_data_info</code>)
    now returns an extra segment pair if the maximum ring difference does not coincide with a &quot;full&quot; segment.
    This change was to accomodate how GE uses even span.
</li>
</ul>

<h3>New functionality</h3>
<ul>
<li><code>write_to_file</code> is a new addition that makes it easier to write
using the default output file format.</li>
<li><code>FilePath</code> is a new addition that provides a thin cross-platform layer for file and folder operations. In addition to the features already found in utilities it can create new paths and perform checks on paths about accessibility and writting permissions.</li>
<li>Added apply/undo methods to <code>BinNormalisation</code> to process whole <code>ProjData</code></li>
<li>extra functionality for <code>ProjData</code>:
  <ul>
   <li>added <code>fill()</code> functions (with float or with another <code>ProjData</code>)</li>
   <li>added <code>get_proj_data_info_sptr()</code> (also to <code>Sinogram</code> et al)</li>
   <li><code>write_to_file</code> moved from <code>ProjDataInMemory</code> to <code>ProjData</code></li>
  </ul>
</li>
<li> Support for Energy Resolution and energy windows in Scanners, has been added. 
In order to ensure backwards compatibility, at the moment, it is completely optional.</li>
<li> Information on energy windows has been added in the <code>ExamInfo</code>. </li>
<li><code>ExamData</code> is a new base class for <code>ProjData</code> and <code>CListModeData</code> </li>
<li>Moved functions from the <code>poisson_noise</code> utility to a new class
  <code>GeneralisedPoissonNoiseGenerator</code>.
  </li>
 <li>Added the ability to <code>KeyParser</code> to parse <code>long int</code> numbers. Also add <code>remove_key</code>.
 </li>
 <li>Introduce <code>operator&gt;=</code> for <code>ProjDataInfo</code>.</li>
</ul>

<h3>Other code changes</h3>
<ul>
<li>We removed all <code>using std::vector</code> etc statements from .h,.inl,.txx files.
  This means you might have to modify your own code accordingly.</li>
<li>Changed <code>ProjMatrixByBin</code> to have separate caches per view-segment number
  to allow much larger axial/tangential_pos range and for finer-grained OPENMP locking.
  <br />    
  <strong>WARNING</strong>: breaks backwards compatibility as <code>ProjMatrixByBin::set_up</code>
  now has to be called by <code>set_up</code> in each derived class.
  </li>
<li><code>info()</code> and <code>warning()</code> really should no longer be used in the
  <code>printf</code> style, i.e. <code>warning("Some message %d", x)</code> .
  In the next version, they will only accept 1 argument. Use <code>boost::format</code>.</li>
<li><code>get_proj_data_info_ptr()</code> and <code>get_scanner_ptr()</code> should no longer be used as they
can create problems with the lifetime of objects. Use <code>get..._sptr</code> instead.</li>
<li><code>ClistEvent::is_valid_template</code> is a new (pure) virtual function
which is called by <code>LmToProjData</code> to check if the list mode format
can handle the template.
All derived classes of <code>CListEvent</code> will need to implement it.
<li>We removed <code>SeparableMetzArrayFilter::discrete_fourier_transform()</code>. Now <code>stir::fourier</code> is used. No need to comply with the Licence of "Numerical Recipies" anymore.</li>
</li>
</ul>

</body>

</html>

