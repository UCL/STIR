<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
  <head>
    <title>Summary of changes in STIR release 5.0</title>
  </head>

  <body>
    <h1>Summary of changes in STIR release 5.0</h1>

<p>This version is 95% backwards compatible with STIR 4.0 for the user (see below).
Developers might need to make code changes as 
detailed below.
</p>
<h2>Overall summary</h2>
<p>
<ul>
  <li>At least C++-11 is now required. We are not aware of any problems with more recent versions of C++.</li>
  <li>Initial support for PET scanners with block detectors or even generic location of detectors (less tested feature), taking into account
    appropriate geometry. This is currently kept independent of the cylindrical scanner modelling used normally, but this will be changed
    in a future version. See <a href="https://github.com/UCL/STIR/pull/577/">PR #577</a>. This work is described in<br />
    P. Khateri, J. Fischer, W. Lustermann, C. Tsoumpas, and G. Dissertori,<br />
    <cite>Implementation of cylindrical PET scanners with block detector geometry in STIR</cite>,<br />
    EJNMMI Physics, vol. 6, no. 1, p. 15, Jul. 2019, doi: <a href=https://doi.org/10.1186/s40658-019-0248-9>10.1186/s40658-019-0248-9.</a><br />
    V. Dao, E. Mikhaylova, M. L. Ahnen, J. Fischer , K. Thielemans, C. Tsoumpas,<br />
    <cite>Image Reconstruction for PET Scanners With Polygonal Prism Geometry Using STIR</cite>, proc. IEEE MIC 2021<br />
    This code was initially developed by Parisa Khateri and Michael Roethlisberger (ETH), and further improved and tested by Viet Dao (Leeds),
    Daniel Deidda (NPL) and Kris Thielemans (UCL and ASC) with funding by the University of Leeds and <a href=https://www.positrigo.com/>Positrigo AG</a>.
  </li>    
  <li>View Offset Support enabled for the PET scanners, contributed by Palak Wadhwa (Leeds Univ), allowing fixing rotation of reconstructed images, see <a href="https://github.com/UCL/STIR/pull/181">PR 181</a>.
    </li>
  <li>Maximum Likelihood estimation of normalisation factors now includes estimation of geometric factors in 3D, see <a href="https://github.com/UCL/STIR/pull/619">PR 619</a>.
    This code was mostly contributed by Tahereh Niknejad (work completed at University of Lisbao, Portugal and PETsys Electronics, together with Kris Thielemans, UCL),
    as well as capabilities to work with virtual crystals, see <a href="https://github.com/UCL/STIR/pull/833">PR 833</a> and <a href="https://github.com/UCL/STIR/pull/949">PR 949</a>.  See the following proceedings for the initial work<br />
    Tahereh Niknejad, Stefaan Tavernier, Joao Varela, and Kris Thielemans,
    <cite>Validation of 3D Model-Based Maximum-Likelihood Estimation of Normalisation Factors for Partial Ring Positron Emission Tomography</cite>
    In 2016 IEEE Nuclear Science Symposium, Medical Imaging Conference and Room-Temperature Semiconductor Detector Workshop (NSS/MIC/RTSD), 1â€“5.
    <a href="https://doi.org/10.1109/NSSMIC.2016.8069577">DOI: 10.1109/NSSMIC.2016.8069577</a>.
  </li>
  <li>A new <code>ProjDataInfoSubsetByView</code> class has been implemented which allows for subsets of projection data.
      Previously, subset projections could only be stored in fully sampled ProjData. This is still possible, the implementation is backward compatible, and subset reconstructions such as OSMAPSOL have not been changed.
      However, there is now an option to create subsets with <code>ProjData::get_subset</code> which only store a subset of views and so are more memory efficient when subsets might be handled separately.
      <code>ProjDataInfoSubsetByView</code> currently does not support file I/O.
  </li>
  <li> <tt>ROOT</tt> files produced by <tt>GATE</tt> can now be interpreted using ``virtual crystals", see <a href="https://github.com/UCL/STIR/pull/617/">PR #617</a>.
  </li>
  <li>A calibration factor can be applied in the normalisation with a new <code>BinNormalisation</code> derived class <code>BinNormalisationWithCalibration</code>; 
	  Interfile now reads/writes isotope name and calibration factor. See <a href=https://github.com/UCL/STIR/pull/672>PR 672</a>.
	  This  code was contributed by Daniel Deidda (NPL) and Kris Thielemans (UCL)</li>
  <li>Radionuclide information is saved into a JSON configuration file for a number of popular radionuclide for PET and SPECT. This can make operations like decay correction easier and accurate. 
          To be able to use the database we need to provide the isotope name used in the acquisition. For SPECT this is extracted from the Dicom header and saved in the interfile. For PET ways to read this information need to be implemented for each scanner/vendor. The new classes are new <code>Radionuclide</code> and  <code>RadionuclideDB</code>; 
	  This  code was contributed by Daniel Deidda (NPL) and Kris Thielemans (UCL)</li>

  <li>KOSMAPOSL (HKEM) allows now to freeze the iterative part of the kernel at a specific subiteration. Code contributed by Daniel Deidda (NPL), Kris Thielemans (UCL) and Ashley Gillman (CSIRO)</li>
  <li>It is now possibly to call the <a href=https://github.com/gschramm/parallelproj>Georg's Schramm parallelproj</a>
    projectors (using either OpenMP or CUDA), see <a href="https://github.com/UCL/STIR/pull/817">PR 817</a>, contributed by Kris Thielemans (UCL) with Georg Schramm (KUL).
  </li>
  <li>
    OpenMP loop scheduling changed to use <code>dynamic</code> instead of <code>runtime</code>, resulting in faster performance.
  </li>

</ul>
</p>


<p>Of course, there is also the usual code-cleanup and 
improvements to the documentation.
</p>

<p>This release contains mainly code written by Kris Thielemans (UCL), Richard Brown (UCL),
  Parisa Khateri and Michael Roethlisberger (ETHZ),
  Robert Twyman (UCL), Daniel Deidda (NPL), Tahereh Nikjenad (PETsys), Palak Wadhwa (Univ of Leeds),
  Viet Ahn Dao (Univ of Leeds), Ashley Gillman (CSIRO), Georg Schramm (KUL),
  Markus Jehl (Positrigo), Gefei Chen (Univ of Macao)
</p>

    <h2>Patch release info</h2>
    <ul>
      <li> 5.0.0 released 23/03/2022</li>
      <!--
      <li> 4.0.1 released 28/04/2020
        <ul>
          <li><a href=https://github.com/UCL/STIR/pull/513>PR 513</a>  (suppress warnings with clang)</li>
          </ul>
          -->
    </ul>

<h2> Summary for end users (also to be read by developers)</h2>

<h3>Changes breaking backwards compatibility from a user-perspective</h3>
<ul>
<li>
View Offset Support enabled for the PET scanners.
<ul>
 <li>For the scanners that have non-zero intrinsic azimuthal tilt angle, reconstructed images will now get rotated.</li>
 <li>If you use view mashing, in previous STIR versions images were rotated according to half the number of mashed views. This is now corrected.</li>
</ul>
<strong>WARNING</strong> This means that reconstructed PET images will <strong>not be identical</strong> when either the scanner has non-zero view-offset, or view-mashing is on.<br />
To reflect this change, <code>Scanner::get_default_intrinsic_tilt()</code> has been renamed to <code>get_intrinsic_azimuthal_tilt()</code>.<br />
Note: start angle was already supported for SPECT<br />
Backward compatibility for reconstructed images can be achieved by setting the <tt>STIR_LEGACY_IGNORE_VIEW_OFFSET</tt> CMake option to <tt>ON</tt>. (However, copied sinogram data will then always have the offset set to 0, in contrast to earlier versions of STIR).
</li>
<li>
    PoissonLogLikelihood Hessian methods have been corrected to reflect the concavity of the function. Hessian vector products now return non-positive voxels, if the vector (input) is non-negative.
    STIR usages of these methods (OSSPS and SqrtHessianRowSum) have been updated to see no effective change in functionality.
    However, calling the Hessian vector product methods, via python etc., will result in a change in functionality as the sign of the output voxel values has changed.
</li>

<li> Python/MATLAB wrappers no longer have <code>ProjDataInfo::ProjDataInfoCTI</code>, use <code>ProjDataInfo::construct_proj_data_info</code> instead.
  However, this now returns an object of the appropriate (derived) type as opposed to just
  <code>ProjDataInfo</code>. This should be transparent, except apparently for testing equality of objects.
</li>
</ul>



<h3>Bug fixes</h3>
<ul>
<li>
   There was an inconsistency between log-likelihood function
   and its gradient when <tt>use_subset_sensitivities</tt> was false and <tt>num_subsets</tt> greater than 1.
   Fixing this isssue means that images reconstructed with <tt>OSSPS</tt> are different from previous versions of STIR when the above conditions are met.
   See <a href=https://github.com/UCL/STIR/issues/873>Issue #873</a> and associated <a href=https://github.com/UCL/STIR/issues/893>PR #893</a>.
</li>
<li>
  Parametric image reconstruction with <tt>POSMAPOSL</tt> could lead to zeroes being introduced
  gradually during reconstruction.
   See <a href=https://github.com/UCL/STIR/issues/906>Issue #906</a> and associated <a href=https://github.com/UCL/STIR/issues/978>PR #978</a>.
</li>
</ul>

<h3>New functionality</h3>
<ul>
  <li>Capability to model block and generic PET detectors was added. This is currently limited to span=1, no view mashing and the ray-tracing
    matrix (single LOR). It is enabled by specifying appropriate keywords in the Interfile header of the projection data.
    <pre>
      Scanner parameters:=
      normal parameters...
      Scanner geometry (BlocksOnCylindrical/Cylindrical/Generic)  := BlocksOnCylindrical
      Distance between crystals in axial direction (cm)           := 0.22
      Distance between crystals in transaxial direction (cm)      := 0.22
      Distance between blocks in axial direction (cm)             := 0.22
      Distance between blocks in transaxial direction (cm)        := 3.3
      end scanner parameters:=
    </pre>
    Scatter and normalisation code are still pending changes.
    </li>
  <li><a href=https://github.com/gschramm/parallelproj>Georg's Schramm parallelproj</a> is an
    implementation of the Joseph algorithm for projection. If it has been installed
    in your system, and you tell CMake where to find it (`parallelproj_DIR=/wherever/lib/cmake`), the STIR user is
    now able to select an additional projector, called <code>Parallelproj</code>. This will use the CUDA
    version if available, otherwise will fall-back to the OpenMP version. Check the new sample files in
    <tt>examples/samples</tt> and the section in the User's Guide.</li>
  <li>The (still preliminary) code for Maximum Likelihood estimation of normalisation factors now includes estimation of geometric factors in 3D as well
  </li>
  <li>The (also preliminary) <code>ProjDataInfoSubsetByView</code> is backwards compatible and allows a new, memory efficient method for subset projections.
      Subset projections are created with with <code>ProjData::get_subset</code>, which is the only addition to the <code>ProjData</code> class (additions are mostly in the aforementioned new Info class).
      <code>ProjDataInfoSubsetByView</code> can be used to set up projectors, which will project only the subset.
      <code>ProjDataInfoSubsetByView</code> currently does not support file I/O. Therefore, the interface is not yet accessible through parameter files, only through C++ interface.<br/>
    <a href="https://github.com/UCL/STIR/pull/969/">PR #969</a>
  <li>
    <code>calculate_attenuation_coefficients</code> utility now accepts an optional forward projection parameter file in the same format as the <code>forward_project</code> utility. Example usage has been added to <tt>src/recon_test_pack/simulate_data.sh</tt>.
  </li>
  <li>
    <tt>ROOT</tt> files produced by <tt>GATE</tt> can now be interpreted using ``virtual crystals", i.e. by inserting
    ``dummy" crystals before converting to cylindrical geometry (as is done on many Siemens scanners). <code>LmToProjData</code>
    and list mode reconstructions will then put the LORs more accurately (at least when the ``virtual crystals"
    roughly correspond to gaps between blocks). See the update <tt>.hroot</tt> file in <tt>examples/samples</tt>.<br />
    <strong>Warning</strong>: if you use the <tt>originating system</tt> to specify the scanner, this will be automatically enabled.
    (If you do not want this, set it to <tt>User_defined_scanner</tt> and specify all values).<br />
    <a href="https://github.com/UCL/STIR/pull/617/">PR #617</a>
  </li>
</li>
<li>Moved most code from the <tt>ctac_to_mu_values.cxx</tt> utility to a new
  <code>HUToMuImageProcessor</code> class (derived from <code>DataProcessor</code>.
  This allows combining it with filtering etc, also from in Python. It means that the
  <tt>ctac_to_mu_values.cxx</tt> utility itself is now obsolete, but it still exists in
  this version. (Note that this functionality depends on an external
  <a href=https://github.com/nlohmann/json>JSON library</a>.)
</li>
<li>Addition of a new utility <tt>create_multi_header</tt> which can be used to create
  a single header pointing to several files (e.g. one image per time frame). The header
  uses the (STIR-specific) <tt>multi</tt> format.
</li>
<li>Addition of a new utility <tt>extract_single_images_from_parametric_image</tt> to
  get each parametric image in a single file.
</li>
<li><tt>generate_image</tt> parameter files now support the <tt>originating system</tt> keyword.
</li>
<li><tt>list_image_info</tt> now works for dynamic images, with a new <tt>--per-volume</tt> option to list min/max/sum for every volume.
</li>
<li><tt>SSRB</tt> now has the option of taking a template sinogram.
</li> 
 <li><tt>KOSMAPOSL</tt> (HKEM) allows now to freeze the iterative part of the kernel at a specific subiteration. This can be set in the parameter file through the keyword <tt>freeze_iterative_kernel_at_subiter_num</tt>
</li>     
<li><code>BinNormalisationWithCalibration</code> is a new class derived from <code>BinNormalisation</code>. This class allows to apply calibration factor from the scanner and save the information into the interfile header. To use this, a specific BinNormalisation class should be derived from BinNormalisationWithCalibration, the information about the calibration factor read, and the function get_uncalibrated_bin_efficiencies() needs to be overwritten. Note that also the isotope name and branching ratio can be set here (the latter will need to be set according to the isotope by reading into a radionuclide database, see below). BinNormalisationSPECT already reads Calibration factor and isotope name and apply the calibration factor read from interfile. Since not all SPECT scanner do quantitative reconstruction an option of setting the calibration factor from the parameter file is added. Factors for BinNormalisationECA8/ECAT7 and GEHDF5 are set to one at the moment as we need to double check on the meaning of cross calibration factor for ECAT and find out how to read them for GEHDF5. Documentation for this is pending and will be added in the following PR.
</li>
<li><code>Radionuclide</code> is a new class which contains radionuclide information such as halflife, branching ratio, energy etc. This class allows to propagate infrmation trough the reconstruction as it is now a member in the <code>ExamInfo</code>. It is populated from the information extracted from <code>RadionuclideDB</code> which allows to create a Radionuclide object from the information stored in the <tt>radionuclide_info.json</tt> in the STIR configuration directory. Different vendors, as we saw with SPECT, may have different standards for the isotope name. Three different ones were observed, therefore a lookup table has been added to allow the use of the data base for any different isotope name format. The lookup table is a JSON file stored in <tt>radionuclide_names.json</tt>.
</li>
 <li>Logcosh Prior.</li>
<li>
	SAFIR input file format now supports a Gaussian LOR randomization, which is applied on the endpoints of each LOR when sorting the listmode events into virtual scanner projection data.
</li>
<li><code>Scanner</code> has now a new <code>static</code> member <code>get_names_of_predefined_scanners</code> returning a list of names.
</li>
<li>
    Exposed <code>compute_total_ROI_values</code> and <code>ROIValues</code> to Python/MATLAB via swig. Added python example <code>ROI_demo.py</code> to demonstrate usage.
</li>
<li>
    Additional C++ demo demonstrating the use the objective function and gradient ascent optimisation, see <tt>examples/src/demo4_obj_fun.cxx</tt>.
</li>
<li>A few functions related to TOF were added to <code>ProjDataInfo</code> and <code>Scanner</code> for future compatibility. However, this release still does not support TOF. (Check the GitHub site for the relevant PR).
</li>
<li>
    Exposed <code>BinNormalisation</code>, <code>ListModeData</code>, <code>LmToProjData</code>, <code>ProjectorByBinPair</code>, <code>ScatterSimulation</code>, <code>ScatterEstimation</code> and a couple of support classes and functions to Python/MATLAB via swig. Added python example <code>listmode_demo.py</code> to demonstrate usage.
</li>
<li>
    More setter functions on ScatterEstimation.
</li>
</ul>


<h3>Changed functionality</h3>
<ul>
  <li>
    OpenMP loop scheduling changed to use <code>dynamic</code> instead of <code>runtime</code>. On some machines, this was causing slower projection operations due to a <code>static</code> scheduler being selected by default. See <a href=https://github.com/UCL/STIR/issues/935>Issue #935</a> for more details.
  </li>
<li>Many operations with <code>ProjDataInMemory</code> are now much faster (it now uses an underlying 1D array).
</li>
<li>
  <code>ParametricDiscretisedDensity</code> objects can now have an <code>ExamInfo</code> object
  with multiple time frames (corresponding to the time frames of the data where the parametric image is derived from).
  In some cases, there could only be a single time frame (start to end of the study).
  </li>
  <li> <code>find_ML_normfactors3D</code> and <code>apply_ML_normfactors3D</code> can be used for scanner with virtual crystal (Only verified on mCT).
      Contributed by Gefei Chen, see <a href=https://github.com/UCL/STIR/pull/833>PR 833</a>.
  </li>
  <li> If there are multiple buckets specified in the interfile header, we increase the symmetry size to a bucket in the <code>find_ML_normfactors3D</code>. Otherwise, we use a block.
     The use of an argument <code>--for-symmetry-per-block</code> in the <code>find_ML_normfactors3D</code> utility will use the symmetry size of a block.
  </li>
 <li><tt>apply_patlak_to_images</tt> no longer uses an existing file as a template for the dynamic image but will overwrite it.</li>
	<li><tt>ROOT</tt> file I/O improvements. An entire entry's tree is no longer loaded by default and instead individual branches are loaded as needed.
    ROOT file event processing is now up to 4x faster. In addition, there is now an option to <tt>check energy window information</tt> (defaulting to on).
    Futhermore, added functionality to exclude true and unscattered event types from list mode processing. </li>
</ul>


<h3>Build system</h3>
<ul>
  <li>We now require CMake at least version 3.1, although we highly recommended to use a very recent version
    of CMake to avoid problems with libraries or compilers which are more recent than your CMake version.
    </li>
<li>
  <strong>At least C++-11 is now required</strong>. We are not aware of any problems with most recent versions of C++. When building,
  you can change the C++ version
  by setting <code>CMAKE_CXX_STANDARD</code>, see <a href="https://cmake.org/cmake/help/v3.17/prop_tgt/CXX_STANDARD.html">the CMake
  documentation</a> for supported values.<br />
  When importing STIR's <tt>STIRConfig.cmake</tt> via <code>find_package(STIR)</code>, your compiler will be set to use
  at least C++-11 (via CMake's <code>target_compile_features</code>).<br />
  Note that some external libraries that STIR depends on (such as ROOT) might increase the required C++ version,
  depending on how they were built.
</li>
<li>CERN's <tt>ROOT</tt> library is now preferentially found by searching for
  its own exported <tt>ROOTConfig.cmake</tt>. Set the CMake variable <tt>ROOT_DIR</tt> accordingly. Older behaviour relying on <tt>ROOTSYS</tt> and <tt>root-config</tt> will be deprecated in a future version.
  </li>
 <li>If you have CMake 3.14 or more recent, Python is found using the <a href="https://cmake.org/cmake/help/latest/module/FindPython.html">FindPython</a> module, as opposed to the deprecated <a href="https://cmake.org/cmake/help/v3.14/module/FindPythonLibs.html">FindPythonLibs</a>. <a href="https://cmake.org/cmake/help/v3.14/module/FindPythonInterp.html">FindPythonInterp</a> modules. You can set the <tt>Python_EXECUTABLE</tt> variable to a particular version (see the CMake doc for other hints you can provide).( If the old <tt>PYTHON_EXECUTABLE</tt> is set, we use it to initialise <tt>Python_EXECUTABLE</tt>).
</li>
</ul>


<h3>Known problems</h3>
<ul>
<li>
</li>
</ul>

<h3>Minor bug fixes</h3>
<ul>
<li>
  Removed boolean state from SAFIR ListMode factory, to enable reading more than one listmode file in the same runtime environment.
</li>
</ul>

<h3>Documentation changes</h3>
<ul>
<li>Added documentation on new features</li> 
<li>Also check the wiki in addition to the provided PDFs.
</li>
 </ul>

<h3>recon_test_pack changes</h3>
<ul>
  <li>updated version number and added some clarification to the README.txt</li>
  <li>moved the <tt>src/recon_test/test_modelling.sh</tt> and associated input files to the <tt>recon_test_pack</tt>.
    It is also modified to be independent of ECAT7 and now runs again.
    </li>
 </ul>

<h3>Other changes to tests</h3>
<ul>
  <li>expanded <tt>test_proj_data_in_memory</tt> to also test <code>ProjDataInterfile</code> so renamed
    the test to <tt>test_proj_data</tt>.
  </li>
</ul>

<H2>What's new for developers (aside from what should be obvious
from the above):</H2>

<h3>Major bugs fixed</h3>
<ul>
<li>see above</li>
</ul>

<h3>Backward incompatibities</h3>
<ul>
    <li>Classes that use <code>InterfilePDFSHeader</code> now contain a <code>shared_ptr&lt;ProjDataInfo&gt;</code> instead of a raw pointer, removing a memory leak.</li>
    <li>Changes improving safety of use of <code>shared_ptr</code>:<br />
      In the previous version of STIR, the use of <code>shared_ptr</code> allowed unsafe access to
      the objects (although this never happened in distributed STIR code). We now prevent this with changes to the class interface (although there is still work to do):
      <ul>
        <li>Where possible, classes that internally contained a <code>shared_ptr&lt;ProjDataInfo&gt;</code> now contain a <code>shared_ptr&lt;const ProjDataInfo&gt;</code>, and similar for <code>DiscretisedDensity</code></li>
        <li><code>get_proj_data_info_sptr</code> used to return <code>shared_ptr&lt;ProjDataInfo&gt;</code>, but now returns <code>shared_ptr&lt;const ProjDataInfo&gt;</code>, similar for <code>ExamInfo</code>.</li>
	<li>Corresponding constructors and some functions, including <code>set_up</code>, that accept <code>shared_ptr</code> now take a <code>shared_ptr</code> to a <code>const</code> object.</li>
      </ul>
    </li>
    <li><code>ProjData*::copy_to</code> and <code>fill_from</code> now return the updated iterator (as opposed to the size). This is like <code>std::copy</code>, and more convenient for reusing it.
    </li>
    <li><code>ModelMatrix::set_if_uncalibrated</code> and <code>ModelMatrix::get_if_uncalibrated</code> renamed to <code>ModelMatrix::set_is_uncalibrated</code> and <code>ModelMatrix::get_is_uncalibrated</code></li>
    <li><code>PlasmaData::set_if_decay_corrected</code> and <code>PlasmaData::get_if_decay_corrected</code> renamed to <code>PlasmaData::set_is_decay_corrected</code> and <code>PlasmaData::get_is_decay_corrected</code></li>
    <li>Remove overloaded <code>PatlakPlot::get_model_matrix</code>, now it can only be called using class members</li>
    <li><code>BinNormalisation::set_up()</code> now need exam_info_sptr as input.</li>
    <li><code>BinNormalisation::apply()</code> and <code>undo</code> now no longer accept start_time and end_time as they are taken from exam_info. To allow this to happen, class <code>Bin</code> has now an extra member <code>time_frame()</code>. Note that it defaults to 1. If this is incorrect, it has to be initialised explicitly (not via a constructor).</li>
    <li>Poisson log-likelihood hierarchy has changed for gradient methods to now use <tt>actual_compute_subset_gradient_without_penalty</tt>
	in the derived classes (which has an extra argument <tt>add_sensitivity</tt>). Therefore developers that created their own derived class will need to
	adjust their class accordingly. The <tt>public</tt> class interface is identical though.
    </li>
    <li><code>DetectorCoordinateMapFromfile</code> (used by SAFIR listmode files) has been renamed to <code>DetectorCoordinateMap</code> and moved from <tt>listmode</tt> to <tt>buildblock</tt>.</li>
    <li><code>Scanner</code> now has a <code>set_up()</code> function. This needs to be called after
      using any of the <code>set_*()</code> functions (except <code>set_params</code>). For the blocks/generic
      scanners, this will fill in the detector maps etc.
      You will get a run-time exception if you forgot to do this.
    </li>
</ul>

<h3>New functionality</h3>
<ul>
  <li>New templated functions <code>stir::copy_to</code> and <code>stir::fill_from</code> in <tt>stir/copy_fill.h</tt> which
    can be used to fill most STIR objects from an iterator range (or copy to).
    The functions normally use <code>stir_object.begin_all()</code> but resort to <code>stir_object::fill_from</code> or <code>copy_to</code> for a few cases where no iterators exist. We use some specialisations to try and find the fastest version.
  </li>
  <li>Introduced <code>ProjData::standard_segment_sequence</code> function returning <tt>0,+1,-1,...</tt>,
as used by <code>copy_to</code> and <code>fill_from</code>
</li>
<li><code>stir::read_from_file</code> can now be called with a "node", e.g.
  <pre>
    auto uptr = read_from_file&lt;VoxelsOnCartesianGrid&lt;float&gt; &gt;(filename);
  </pre>
  To do this, we now need a <code>typedef</code> <code>hierarchy_base_type</code> at the top level, as otherwise
  we would need multiple registries. However, this was already required by <code>write_to_file</code> anyway.
</li>
<li>
  <code>GeneralisedPrior</code> and <code>QuadraticPrior</code> have a new method <code>accumulate_Hessian_times_input(output, current_estimate, input)</code>. This computes the hessian of the prior at the <code>current_image_estimate</code> and multiplies this by <code>input</code>.
  Before this, the <code>add_multiplication_with_approximate_Hessian(output, input)</code> method was used that assumed a quadratic function and therefore <code>hessian = 1</code>.
</li>
<li><code>Exam_info</code>, <code>TimeFrameDefinition</code> and <code>PatientPosition </code> have now a <code>==</code> operator</li>
<li>
    Overloaded <code>compute_total_ROI_values</code> and <code>compute_ROI_values_per_plane</code> functions to allow the passing of  a<code>VoxelsOnCartesianGrid</code> object instead of a <code>Shape3D</code> as the ROI shape.
    This allows the ROI volume to be constructed during preprocessing for multiple image analysis.
</li>
<li><code>KeyParser::parameter_info()</code> now outputs vectorised keys as well
</li>
<li><code>DetectionPosition</code> now has all comparison operators.
</li>
<li><code>LOR</code> classes now no longer require phi at input to be between 0 and pi,
  nor psi to be between 0 and 2 pi. They will standardise the input automatically.
  </li>
</ul>


<h3>Other code changes</h3>
<ul>
    <li>store data in <code>ProjDataInMemory</code> in the same order as what is used by <code>copy_to</code> and <code>fill_from</code>. This enabled using straight-forward copy. (This change should not affect anyone, except if you relied on a specific order in the buffer before.)
    </li>
</ul>

</body>

</html>
