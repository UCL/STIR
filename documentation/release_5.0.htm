<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>
  <head>
    <title>Summary of changes in STIR release 5.0</title>
  </head>

  <body>
    <h1>Summary of changes in STIR release 5.0</h1>

<p>This version is 95% backwards compatible with STIR 4.0 for the user (see below).
Developers might need to make code changes as 
detailed below.
</p>
<h2>Overall summary</h2>
<p>
<ul>
  <li>At least C++-11 is now required. We are not aware of any problems with more recent versions of C++.</li>
  <li>Maximum Likelihood estimation of normalisation factors now includes estimation of geometric factors.
    This code was contributed by Tahereh Niknejad (work completed at University of Lisbao, Portugal and PETsys Electronics, together with Kris Thielemans, UCL).</li>
  <li>Calibration factor can be applied in the normalisation with a new <code>BinNormalisation</code> derived class <code>BinNormalisationWithCalibration</code>; 
	  Interfile now reads/writes isotope name and calibration factor. See <a href=https://github.com/UCL/STIR/pull/672>PR 672</a>.
	  This  code was contributed by Daniel Deidda (NPL) and Kris Thielemans (UCL)</li>

  <li>KOSMAPOSL (HKEM) allows now to freeze the iterative part of the kernel at a specific subiteration. Code contributed by Daniel Deidda (NPL), Kris Thielemans (UCL) and Ashley Gillman (CSIRO)</li>
  <li>It is now possibly to call the <a href=https://github.com/gschramm/parallelproj>Georg's Schramm parallelproj</a>
    projectors (using either OpenMP or CUDA).</li>
</ul>
</p>


<p>Of course, there is also the usual code-cleanup and 
improvements to the documentation.
</p>

<p>This release contains mainly code written by Kris Thielemans (UCL), Richard Brown (UCL), Tahereh Nikjenad (PETsys), Robert Twyman (UCL) and Daniel Deidda (NPL).
</p>

    <h2>Patch release info</h2>
    <ul>
      <li> 5.0.0 released ?/?/2020</li>
      <!--
      <li> 4.0.1 released 28/04/2020
        <ul>
          <li><a href=https://github.com/UCL/STIR/pull/513>PR 513</a>  (suppress warnings with clang)</li>
          </ul>
          -->
    </ul>

<h2> Summary for end users (also to be read by developers)</h2>

<h3>Changes breaking backwards compatibility from a user-perspective</h3>
<ul>
<li>
View Offset Support enabled for the PET scanners.
<ul>
 <li>For the scanners that have non-zero intrinsic azimuthal tilt angle, reconstructed images will now get rotated.</li>
 <li>If you use view mashing, in previous STIR versions images were rotated according to half the number of mashed views. This is now corrected.</li>
</ul>
<strong>WARNING</strong> This means that reconstructed PET images will <strong>not be identical</strong> when either the scanner has non-zero view-offset, or view-mashing is on.<br />
To reflect this change, <code>Scanner::get_default_intrinsic_tilt()</code> has been renamed to <code>get_intrinsic_azimuthal_tilt()</code>.<br />
Note: start angle was already supported for SPECT<br />
Backward compatibility for reconstructed images can be achieved by setting the <tt>STIR_LEGACY_IGNORE_VIEW_OFFSET</tt> CMake option to <tt>ON</tt>. (However, copied sinogram data will then always have the offset set to 0, in contrast to earlier versions of STIR).
</li>
</ul>


<h3>Bug fixes</h3>
<ul>
<li>
</li>
</ul>

<h3>New functionality</h3>
<ul>
  <li><a href=https://github.com/gschramm/parallelproj>Georg's Schramm parallelproj</a> is an
    implementation of the Joseph algorithm for projection. If it has been installed
    in your system, and you tell CMake where to find it (`parallelproj_DIR=/wherever/lib/cmake`), the STIR user is
    now able to select an additional projector, called <code>Parallelproj</code>. This will use the CUDA
    version if available, otherwise will fall-back to the OpenMP version. Check the new sample files in
    <tt>examples/samples</tt> and the section in the User's Guide.</li>
  <li>The (still preliminary) code for Maximum Likelihood estimation of normalisation factors now includes estimation of geometric factors in 3D as well. See<br />
    Tahereh Niknejad, Stefaan Tavernier, Joao Varela, and Kris Thielemans,
    <cite>Validation of 3D Model-Based Maximum-Likelihood Estimation of Normalisation Factors for Partial Ring Positron Emission Tomography</cite>
    In 2016 IEEE Nuclear Science Symposium, Medical Imaging Conference and Room-Temperature Semiconductor Detector Workshop (NSS/MIC/RTSD), 1â€“5.
    <a href="https://doi.org/10.1109/NSSMIC.2016.8069577">DOI: 10.1109/NSSMIC.2016.8069577</a>.
</li>
  <li>
      Additional demo demonstrating the use the objective function and gradient ascent optimisation, see <tt>examples/src/demo4_obj_fun.cxx</tt>.
  </li>
  <li>
    <tt>ROOT</tt> files produced by <tt>GATE</tt> can now be interpreted using ``virtual crystals", i.e. by inserting
    ``dummy" crystals before converting to cylindrical geometry (as is done on many Siemens scanners). <code>LmToProjData</code>
    and list mode reconstructions will then put the LORs more accurately (at least when the ``virtual crystals"
    roughly correspond to gaps between blocks). See the update <tt>.hroot</tt> file in <tt>examples/samples</tt>.<br />
    <strong>Warning</strong>: if you use the <tt>originating system</tt> to specify the scanner, this will be automatically enabled.
    (If you do not want this, set it to <tt>User_defined_scanner</tt> and specify all values).<br />
    <a href="https://github.com/UCL/STIR/pull/617/">PR #617</a>
  </li>
</li>
<li>Moved most code from the <tt>ctac_to_mu_values.cxx</tt> utility to a new
  <code>HUToMuImageProcessor</code> class (derived from <code>DataProcessor</code>.
  This allows combining it with filtering etc, also from in Python. It means that the
  <tt>ctac_to_mu_values.cxx</tt> utility itself is now obsolete, but it still exists in
  this version. (Note that this functionality depends on an external
  <a href=https://github.com/nlohmann/json>JSON library</a>.)
</li>
<li>Addition of a new utility <tt>create_multi_header</tt> which can be used to create
  a single header pointing to several files (e.g. one image per time frame). The header
  uses the (STIR-specific) <tt>multi</tt> format.
</li>
<li>Addition of a new utility <tt>extract_single_images_from_parametric_image</tt> to
  get each parametric image in a single file.
</li>
<li><tt>generate_image</tt> parameter files now support the <tt>originating system</tt>.
</li>
<li><tt>list_image_info</tt> now works for dynamic images, with a new <tt>--per-volume</tt> option to list min/max/sum for every volume.
</li>
<li><tt>SSRB</tt> now has the option of taking a template sinogram.
</li> 
 <li><tt>KOSMAPOSL</tt> (HKEM) allows now to freeze the iterative part of the kernel at a specific subiteration. This can be set in the parameter file through the keyword <tt>freeze_iterative_kernel_at_subiter_num</tt>
</li>     
<li><code>BinNormalisationWithCalibration</code> is a new class derived from <code>BinNormalisation</code>. This class allows to apply calibration factor from the scanner and save the information into the interfile header. To use this, a specific BinNormalisation class should be derived from BinNormalisationWithCalibration, the information about the calibration factor read, and the function get_uncalibrated_bin_efficiencies() needs to be overwritten. Note that also the isotope name and branching ratio can be set here (the latter will need to be set according to the isotope by reading into a radionuclide database). BinNormalisationSPECT already reads Calibration factor and isotope name and apply the calibration factor read from interfile. Since not all SPECT scanner do quantitative reconstruction an option of setting the calibration factor from the parameter file is added. Factors for BinNormalisationECA8/ECAT7 and GEHDF5 are set to one at the moment as we need to double check on the meaning of cross calibration factor for ECAT and find out hoe to read them for GEHDF5. Documentation for this is pending and will be added in the following PR.
</li>
 <li>Logcosh Prior.</li>
<li>
	SAFIR input file format now supports a Gaussian LOR randomization, which is applied on the endpoints of each LOR when sorting the listmode events into virtual scanner projection data.
</li>
<li><code>Scanner</code> has now a new <code>static</code> member <code>get_names_of_predefined_scanners</code> returning a list of names.
</li>
</ul>


<h3>Changed functionality</h3>
<ul>
<li>Many operations with <code>ProjDataInMemory</code> are now much faster (it now uses an underlying 1D array).
</li>
<li>
  <code>ParametricDiscretisedDensity</code> objects can now have an <code>ExamInfo</code> object
  with multiple time frames (corresponding to the time frames of the data where the parametric image is derived from).
  In some cases, there could only be a single time frame (start to end of the study).
  </li>
<li><tt>apply_patlak_to_images</tt> no longer uses an existing file as a template for the dynamic image but will overwrite it.</li>
	<li><tt>ROOT</tt> file I/O improvements. An entire entry's tree is no longer loaded by default and instead individual branches are loaded as needed.
    ROOT file event processing is now up to 4x faster. In addition, there is now an option to <tt>check energy window information</tt> (defaulting to on).
    Futhermore, added functionality to exclude true and unscattered event types from list mode processing. </li>
</ul>


<h3>Build system</h3>
<ul>
  <li>We now require CMake at least version 3.1, although we highly recommended to use a very recent version
    of CMake to avoid problems with libraries or compilers which are more recent than your CMake version.
    </li>
<li>
  At least C++-11 is now required. We are not aware of any problems with most recent versions of C++. When building,
  you can change the C++ version
  by setting <code>CMAKE_CXX_STANDARD</code>, see <a href="https://cmake.org/cmake/help/v3.17/prop_tgt/CXX_STANDARD.html">the CMake
  documentation</a> for supported values.<br />
  When importing STIR's <tt>STIRConfig.cmake</tt> via <code>find_package(STIR)</code>, your compiler will be set to use
  at least C++-11 (via CMake's <code>target_compile_features</code>).<br />
  Note that some external libraries that STIR depends on (such as ROOT) might increase the required C++ version,
  depending on how they were built.
</li>
<li>CERN's <tt>ROOT</tt> library is now preferentially found by searching for
  its own exported <tt>ROOTConfig.cmake</tt>. Set the CMake variable <tt>ROOT_DIR</tt> accordingly. Older behaviour relying on <tt>ROOTSYS</tt> and <tt>root-config</tt> will be deprecated in a future version.
  </li>
</ul>


<h3>Known problems</h3>
<ul>
<li>
</li>
</ul>

<h3>Minor bug fixes</h3>
<ul>
<li>
</li>
</ul>

<h3>Documentation changes</h3>
<ul>
<li>Added documentation on new features</li> 
<li>Also check the wiki in addition to the provided PDFs.
</li>
 </ul>

<h3>recon_test_pack changes</h3>
<ul>
  <li>updated version number and added some clarification to the README.txt</li>
  <li>moved the <tt>src/recon_test/test_modelling.sh</tt> and associated input files to the <tt>recon_test_pack</tt>.
    It is also modified to be independent of ECAT7 and now runs again.
    </li>
 </ul>

<h3>Other changes to tests</h3>
<ul>
  <li>expanded <tt>test_proj_data_in_memory</tt> to also test <code>ProjDataInterfile</code> so renamed
    the test to <tt>test_proj_data</tt>.
  </li>
</ul>

<H2>What's new for developers (aside from what should be obvious
from the above):</H2>

<h3>Major bugs fixed</h3>
<ul>
<li>see above</li>
</ul>

<h3>Backward incompatibities</h3>
<ul>
    <li>Classes that use <code>InterfilePDFSHeader</code> now contain a <code>shared_ptr&lt;ProjDataInfo&gt;</code> instead of a raw pointer, removing a memory leak.</li>
    <li>Changes improving safety of use of <code>shared_ptr</code>:<br />
      In the previous version of STIR, the use of <code>shared_ptr</code> allowed unsafe access to
      the objects (although this never happened in distributed STIR code). We now prevent this with changes to the class interface (although there is still work to do):
      <ul>
        <li>Where possible, classes that internally contained a <code>shared_ptr&lt;ProjDataInfo&gt;</code> now contain a <code>shared_ptr&lt;const ProjDataInfo&gt;</code>, and similar for <code>DiscretisedDensity</code></li>
        <li><code>get_proj_data_info_sptr</code> used to return <code>shared_ptr&lt;ProjDataInfo&gt;</code>, but now returns <code>shared_ptr&lt;const ProjDataInfo&gt;</code>, similar for <code>ExamInfo</code>.</li>
	<li>Corresponding constructors and some functions, including <code>set_up</code>, that accept <code>shared_ptr</code> now take a <code>shared_ptr</code> to a <code>const</code> object.</li>
      </ul>
    </li>
    <li><code>ProjData*::copy_to</code> and <code>fill_from</code> now return the updated iterator (as opposed to the size). This is like <code>std::copy</code>, and more convenient for reusing it.
    </li>
    <li><code>ModelMatrix::set_if_uncalibrated</code> and <code>ModelMatrix::get_if_uncalibrated</code> renamed to <code>ModelMatrix::set_is_uncalibrated</code> and <code>ModelMatrix::get_is_uncalibrated</code></li>
    <li><code>PlasmaData::set_if_decay_corrected</code> and <code>PlasmaData::get_if_decay_corrected</code> renamed to <code>PlasmaData::set_is_decay_corrected</code> and <code>PlasmaData::get_is_decay_corrected</code></li>
    <li>Remove overloaded <code>PatlakPlot::get_model_matrix</code>, now it can only be called using class members</li>
    <li><code>BinNormalisation::set_up()</code> now need exam_info_sptr as input.</li>
    <li><code>BinNormalisation::apply()</code> and <code>undo</code> now no longer accept start_time and end_time as they are taken from exam_info. To allow this to happen, class <code>Bin</code> has now an extra member <code>time_frame()</code>. Note that it defaults to 1. If this is incorrect, it has to be initialised explicitly (not via a constructor).</li>
</ul>

<h3>New functionality</h3>
<ul>
  <li>New templated functions <code>stir::copy_to</code> and <code>stir::fill_from</code> in <tt>stir/copy_fill.h</tt> which
    can be used to fill most STIR objects from an iterator range (or copy to).
    The functions normally use <code>stir_object.begin_all()</code> but resort to <code>stir_object::fill_from</code> or <code>copy_to</code> for a few cases where no iterators exist. We use some specialisations to try and find the fastest version.
  </li>
  <li>Introduced <code>ProjData::standard_segment_sequence</code> function returning <tt>0,+1,-1,...</tt>,
as used by <code>copy_to</code> and <code>fill_from</code>
</li>
<li><code>stir::read_from_file</code> can now be called with a "node", e.g.
  <pre>
    auto uptr = read_from_file&lt;VoxelsOnCartesianGrid&lt;float&gt; &gt;(filename);
  </pre>
  To do this, we now need a <code>typedef</code> <code>hierarchy_base_type</code> at the top level, as otherwise
  we would need multiple registries. However, this was already required by <code>write_to_file</code> anyway.
</li>
<li>
  Generalised prior and Quadratic prior have a new method <code>accumulate_Hessian_times_input(output, current_estimate, input)</code>. This computes the hessian of the prior at the <code>current_image_estimate</code> and multiplies this by <code>input</code>.
  Before this, the <code>add_multiplication_with_approximate_Hessian(output, input)</code> method was used that assumed a quadratic function and therefore <code>hessian = 1</code>.
</li>
<li><code>Exam_info</code>, <code>TimeFrameDefinition</code> and <code>PatientPosition </code> have now a <code>==</code> operator</li>
</ul>


<h3>Other code changes</h3>
<ul>
    <li>store data in <code>ProjDataInMemory</code> in the same order as what is used by <code>copy_to</code> and <code>fill_from</code>. This enabled using straight-forward copy. (This change should not affect anyone, except if you relied on a specific order in the buffer before.)
    </li>
<li><code>LOR</code> classes now no longer require phi at input to be between 0 and pi,
  nor psi to be between 0 and 2 pi. They will standardise the input automatically.
  </li>
</ul>

</body>

</html>
