/*
 *  Copyright (C) 2015, 2016 University of Leeds
    Copyright (C) 2016, UCL
    This file is part of STIR.

    This file is free software; you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation; either version 2.1 of the License, or
    (at your option) any later version.

    This file is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    See STIR/LICENSE.txt for details
*/
/*!
  \file
  \ingroup listmode
  \brief Declaration of class stir::CListModeDataROOT

  \author Nikos Efthimiou
  \author Harry Tsoumpas
*/

#ifndef __stir_listmode_CListModeDataROOT_H__
#define __stir_listmode_CListModeDataROOT_H__

#include "stir/listmode/CListModeData.h"
#include "stir/listmode/CListRecordROOT.h"
#include "stir/IO/InputStreamFromROOTFile.h"
#include "stir/KeyParser.h"

START_NAMESPACE_STIR

//!
//! \brief The CListModeDataROOT class
//! \details A class that reads ROOT files, generated by GATE, as listmode data.
//! \author Nikos Efthimiou
//!
class CListModeDataROOT : public CListModeData
{
public:
    //! Construct fron the filename of the Interfile header
    CListModeDataROOT(const std::string& listmode_filename_prefix);

    virtual std::string
    get_name() const;

    virtual
    shared_ptr <CListRecord> get_empty_record_sptr() const;

    virtual
    Succeeded get_next_record(CListRecord& record) const;

    virtual
    Succeeded reset();

    virtual
    SavedPosition save_get_position();

    virtual
    Succeeded set_get_position(const SavedPosition&);

    virtual
    bool has_delayeds() const { return true; }

    virtual inline
    unsigned long int
    get_total_number_of_events() const ;

private:
//    typedef CListRecordROOT CListRecordT;

    //! The header file, bad name choise.
    std::string listmode_filename;

    //! Pointer to the listmode data
    shared_ptr<InputStreamFromROOTFile > current_lm_data_ptr;

    //! The name of the originating scanner
    std::string originating_system;
    int num_rings;
    int num_detectors_per_ring;
    int max_num_non_arccorrected_bins;
    float inner_ring_diameter;
    float average_depth_of_interaction;
    float ring_spacing;
    float bin_size;

    KeyParser parser;
    //! Name of input chain which is going to be used.

    Succeeded open_lm_file();
};


END_NAMESPACE_STIR

#endif
