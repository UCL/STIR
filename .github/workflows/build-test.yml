name: pack CI

on:
  push:
  pull_request:

jobs:
  build-macos:
    name: macOS-latest-clang21-cuda0-Release-pp=OFF-ROOT=OFF
    runs-on: macos-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.13 (for SWIG bindings / NumPy)
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Create venv and install Python deps
        run: |
          set -euxo pipefail
          python -m venv my-env
          source my-env/bin/activate
          python -m pip install --upgrade pip
          pip install numpy

      - name: Install build toolchain (clang@21, cmake, ninja, swig, libomp)
        run: |
          set -euxo pipefail
          brew update
          brew install llvm@21 cmake ninja swig libomp || true
          echo "/opt/homebrew/opt/llvm@21/bin" >> $GITHUB_PATH

      - name: Print versions
        run: |
          set -euxo pipefail
          source my-env/bin/activate
          cmake --version
          /opt/homebrew/opt/llvm@21/bin/clang --version
          /opt/homebrew/opt/llvm@21/bin/clang++ --version

      - name: Configure (CMake + Ninja)
        env:
          CC: /opt/homebrew/opt/llvm@21/bin/clang
          CXX: /opt/homebrew/opt/llvm@21/bin/clang++
        run: |
          set -euxo pipefail
          source my-env/bin/activate
          export CXXFLAGS="${CXXFLAGS:-} -include stdlib.h"
          CMAKE_INSTALL_PREFIX="${{ github.workspace }}/install"
          echo "CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}"
          mkdir -p build
          cmake -G Ninja -S . -B build \
            -DSTIR_OPENMP=ON \
            -DBUILD_SWIG_PYTHON=ON \
            -DPython_EXECUTABLE="${{ github.workspace }}/my-env/bin/python" \
            -DCMAKE_INSTALL_PREFIX="${CMAKE_INSTALL_PREFIX}" \
            -DCMAKE_BUILD_TYPE=Release \
            -DDOWNLOAD_ZENODO_TEST_DATA=ON \
            -DDISABLE_STIR_LOCAL=OFF \
            -DSTIR_LOCAL="${{ github.workspace }}/examples/C++/using_STIR_LOCAL"

      - name: macOS: drop '-latomic' (not available on Darwin)
        if: runner.os == 'macOS'
        run: |
          set -euxo pipefail
          # Remove every occurrence of -latomic from the generated build rules
          sed -i.bak 's/ -latomic//g' build/build.ninja || true
          # For diagnostics
          if grep -n 'latomic' build/build.ninja; then
            echo "Found stray -latomic references after sed pass" >&2
            exit 1
          fi

      - name: Build
        run: |
          set -euxo pipefail
          ninja -C build -v

      - name: Install
        run: |
          set -euxo pipefail
          ninja -C build install

      - name: Upload install dir (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: stir-install-macos
          path: ${{ github.workspace }}/install
